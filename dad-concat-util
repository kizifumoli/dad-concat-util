#!/usr/bin/env python3

# dad-util: Very basic script to concatenate a set of images in a directory in
# the shape of a user-supplied grid.

import re
import argparse
import subprocess
import tempfile
import enum

from functools import reduce
from pathlib import Path
from datetime import datetime as dt
from typing import Optional, List

class GridOptions:
    def __init__(self, resize_heights: bool, resize_widths: bool, center_horiz: bool, center_vert: bool):
        # (If True) Resizing heights happens when forming a row
        self.resize_heights = resize_heights

        # (If True) Resizing widths happens when joining rows
        self.resize_widths = resize_widths

        # (If True) Centering horizontally occurs when joining rows
        self.center_horizontally = center_horiz

        # (If True) Centering vertically occurs when forming a row
        self.center_vertically = center_vert

class AppendDirection(enum.Enum):
    HORIZONTAL = 1
    VERTICAL = 2


class ImageMagickWrapper:
    @staticmethod
    def get_dimensions(image_path: Path) -> (int, int):
        result = subprocess.run(["identify", "-format", '"%[width]x%[height]"', f"{image_path}"],
                                capture_output=True)
        dimension_str = str(result.stdout.decode("utf-8")).strip().replace('"', '')

        dimension_regex = re.compile(r"(\d+)x(\d+).*?")
        regex_result = dimension_regex.match(dimension_str)
        if regex_result is None:
            raise ValueError(f"Unable to find the width and height on string: {dimension_str}")

        return (int(regex_result[1]), int(regex_result[2]))

    @staticmethod
    def __run_concat_command(files: List[Path],
                             output: Path,
                             append_dir: AppendDirection,
                             options: GridOptions):
        append_dir_str = "+" if (append_dir == AppendDirection.HORIZONTAL) else "-"

        center_args = []
        if ((append_dir == AppendDirection.VERTICAL and options.center_horizontally and (not options.resize_widths)) or
            (append_dir == AppendDirection.HORIZONTAL and options.center_vertically and (not options.resize_heights))):
            center_args = ["-gravity", "center"]

        concat_command = [
            "convert",
            f"{append_dir_str}append",
            "-background", "none",
            *center_args,
            *files,
            f"{output}"
        ]

        result = subprocess.run(concat_command)
        if result.returncode != 0:
            raise ValueError("Non-zero exit code on horizontal concatenation ")


    @staticmethod
    def bulk_resize(input_files: List[Path], output_dir: Path, append_dir: AppendDirection):
        # Get all the dimensions for the images, then use the largest
        # height to ensure they're all correctly resized in a row.
        dimensions = [ImageMagickWrapper.get_dimensions(image_path) for image_path in input_files]

        largest_dims = reduce(lambda lhs, rhs: (max(lhs[0], rhs[0]), max(lhs[1], rhs[1])),
                              dimensions)

        concat_files = []
        for filenum, input_file in enumerate(input_files):
            if append_dir == AppendDirection.HORIZONTAL:
                # Use height if we're appending horizontally (scale up if wide, but not tall)
                geometry_str = f"x{largest_dims[1]}"
            else:
                # Use width if we're appending vertically (scale up if tall, but not wide enough)
                geometry_str = f"{largest_dims[0]}"
            output_filepath = Path(output_dir) / f"{filenum}{input_file.suffix}"
            resize_cmd = [
                "convert",
                "-geometry",
                geometry_str,
                f"{input_file}",
                f"{output_filepath}"
            ]

            result = subprocess.run(resize_cmd)
            if result.returncode != 0:
                raise ValueError("Non-zero exit code on horizontal concatenation ")

            concat_files += [output_filepath]
        return concat_files


    @staticmethod
    def concat_horizontally(files: List[Path], output: Path, options: GridOptions):
        """Concatenates a list of files horizontally using imagemagick's convert utility"""
        append_dir =  AppendDirection.HORIZONTAL
        if not options.resize_heights:
            ImageMagickWrapper.__run_concat_command(files, output, append_dir, options)
            return

        # If the user is okay with resizing the heights, create temporary files
        # by scaling up each image based on the largest one
        concat_files = []
        with tempfile.TemporaryDirectory() as resize_dir:
            concat_files = ImageMagickWrapper.bulk_resize(files, resize_dir, append_dir)
            ImageMagickWrapper.__run_concat_command(concat_files, output, append_dir, options)



    @staticmethod
    def concat_vertically(files: List[Path], output: Path, options):
        """Concatenates a list of files vertically using imagemagick's convert utility"""
        append_dir =  AppendDirection.VERTICAL
        if not options.resize_widths:
            ImageMagickWrapper.__run_concat_command(files, output, append_dir, options)
            return

        # If the user is okay with resizing the heights, create temporary files
        # by scaling up each image based on the largest one
        concat_files = []
        with tempfile.TemporaryDirectory() as resize_dir:
            concat_files = ImageMagickWrapper.bulk_resize(files, resize_dir, append_dir)
            ImageMagickWrapper.__run_concat_command(concat_files, output, append_dir, options)


def generate_grid_rows(n_rows, file_list: List[Path]) -> List[List[Path]]:
    """Given n_rows and n_cols, it converts a file list into a list of lists, where
each list represents a row in the final grid"""
    n_cols = int(len(file_list) / n_rows) # Truncate division

    # If n_cols * n_rows != len(file_list), then add 1 to cols to increase
    # width of grid and ensure everything can fit
    if (n_cols * n_rows) != len(file_list):
        n_cols += 1

    # Source: https://stackoverflow.com/a/1624988
    return [file_list[i: i+n_cols] for i in range(0, len(file_list), n_cols)]


# Source: https://stackoverflow.com/questions/5967500/how-to-correctly-sort-a-string-with-a-number-inside
def atoi(text):
    return int(text) if text.isdigit() else text

def natural_keys(text):
    '''
    alist.sort(key=natural_keys) sorts in human order
    http://nedbatchelder.com/blog/200712/human_sorting.html
    (See Toothy's implementation in the comments)
    '''
    return [ atoi(c) for c in re.split(r'(\d+)', text) ]


def concat_images(input_dir: Path, n_rows: int, output_dir: Path, options: GridOptions):
    today_str = dt.now().strftime("%Y.%m.%d")
    input_files = sorted(input_dir.glob("*"))

    if len(input_files) == 0:
        raise ValueError("Input Directory must not be empty!")

    grid_rows = generate_grid_rows(n_rows, input_files)
    # Create temporary directory to store intermediate files.
    with tempfile.TemporaryDirectory() as tmp_outputdir:
        row_files = []
        row_num = 1
        for row in grid_rows:
            output_row_path = Path(tmp_outputdir) / f"row{row_num}.jpg"
            ImageMagickWrapper.concat_horizontally(row, output_row_path, options)

            row_num += 1
            row_files += [output_row_path]

        # Now, finish by joining all the rows vertically
        ImageMagickWrapper.concat_vertically(row_files, f"{output_dir / today_str}.jpg", options)

    print(f"Output: {output_dir / today_str}.jpg")


def create_argparser() -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser()
    parser.add_argument("--input-dir", type=Path, help="Directory with your DAD submission photos",
                        required=True)
    parser.add_argument("--n-rows", type=int, default=1, help="How many rows in the resulting grid (Default: 1 row)")
    parser.add_argument("--output-dir", type=Path, help="Directory where the output image will be written to",
                        default=Path.home())
    parser.add_argument("--resize-heights", default=True, action=argparse.BooleanOptionalAction, help="When TRUE, files in a row will be scaled up to all have the same height")
    parser.add_argument("--resize-widths", default=True, action=argparse.BooleanOptionalAction, help="When TRUE, rows will be scaled up to all have the same width")
    parser.add_argument("--center-horizontally", default=True, action=argparse.BooleanOptionalAction, help="When TRUE, Images are centered horizontally when --no-resize-widths is specified")
    parser.add_argument("--center-vertically", default=True, action=argparse.BooleanOptionalAction, help="When TRUE, Images are centered vertically when --no-resize-heights is specified")

    parser.set_defaults(func=lambda args: concat_images(args.input_dir, args.n_rows, args.output_dir,
                                                        GridOptions(args.resize_heights, args.resize_widths, args.center_horizontally, args.center_vertically)))
    return parser

def main():
    parser = create_argparser()
    args = parser.parse_args()
    args.func(args)

if __name__ == "__main__":
    main()
